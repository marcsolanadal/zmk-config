/*
 * Corne-5-col (36 keys) - ZMK keymap
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/behaviors.h>

#define MEH &kp LS(LC(LALT))

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_5col_layout;
    };

    behaviors {
	// Custom mod-tap for space-shift
	mt_tp: mod_tap_space_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            bindings = <&kp>, <&kp>;
            display-name = "Mod-Tap";
        };

	// Home-row mods
	hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
	    hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
	    hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

	// Tap dances for closing symbols
        td_bkt: tap_dance_brakets {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBKT>, <&kp RBKT>;
        };
        td_brc: tap_dance_braces {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBRC>, <&kp RBRC>;
        };
        td_par: tap_dance_parenthesis {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LPAR>, <&kp RPAR>;
        };
    };

    macros {
       lock: lock_all_systems {
           compatible = "zmk,behavior-macro";
           #binding-cells = <0>;
           bindings =
             // Linux & Android → HID “Terminal Lock / Screensaver” codes
             <&kp C_AL_LOCK &kp K_LOCK>

             // Windows 10 / 11 (and most Linux DEs) → Win + L                  
             , <&macro_press   &kp LGUI>
             , <&macro_tap     &kp L>
             , <&macro_release &kp LGUI>

             // macOS 10.13+ → Ctrl + Cmd + Q (system lock)
             , <&macro_press   &kp LCTRL &kp LGUI>
             , <&macro_tap     &kp Q>
             , <&macro_release &kp LCTRL &kp LGUI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp Q   &kp W    &kp F        &kp P         &kp B                &kp J	            &kp L         &kp U     &kp Y   &kp APOS
                &kp A   &kp R    &kp S        &hml LSFT T   &kp G                &kp M              &hmr LSFT N   &kp E     &kp I   &kp O
                &kp Z   &kp X    &kp C        &kp D         &kp V                &kp K              &kp H         &kp COMMA &kp DOT &kp FSLH
                                 &lt 3 ESC    &lt 2 TAB     &kp SPACE            &kp SPACE          &mo 1         MEH
            >
        };

        symbols {
            bindings = <
                &kp EXCL    &kp AT    &kp HASH    &kp COLON    &td_bkt          &kp EQUAL    &kp N7    &kp N8    &kp N9    &kp PLUS
                &kp BSLH    &kp AMPS  &td_brc     &td_par      &kp SEMI         &kp STAR     &kp N4    &kp N5    &kp N6    &kp MINUS
                &kp CARET   &kp UNDER &kp PRCNT   &kp DLLR     &kp TILDE        &kp N0       &kp N1    &kp N2    &kp N3    &kp FSLH
                                      &none       &kp PIPE     &kp GRAVE        &none        &none     &none
            >;
        };

        extend {
            bindings = <
                &none      &none       &kp UP    &kp DOWN    &kp INS        &kp PG_UP    &kp HOME    &kp END   &none        &caps_word
                &sk LALT   &sk LCTRL   &sk LGUI  &sk LSFT    &none          &kp LEFT     &kp DOWN    &kp UP    &kp RIGHT    &kp DEL
                &kp LG(Z)  &kp LG(X)   &kp LG(C) &kp LG(V)   &none          &kp PG_DN    &kp BSPC    &none     &none        &kp PSCRN
                                       &none     &none       &none          &kp ENTER    &none       &none
            >;
        };

        function {
            bindings = <
                &kp C_STOP    &kp C_PREV    &kp C_PLAY_PAUSE   &kp C_NEXT    &kp C_BRI_UP        &kp F12     &kp F7      &kp F8      &kp F9      &lock
                &none         &none	    &none              &none         &kp C_BRI_DN     	 &kp F11     &kp F4      &kp F5      &kp F6      &bt BT_SEL 0
                &none 	      &none 	    &kp C_VOL_DN       &kp C_VOL_UP  &kp C_MUTE          &kp F10     &kp F1      &kp F2      &kp F3      &bt BT_SEL 1      
					    &none              &none         &none               &kp ENTER   &none       &none
            >;
        };
    };
};

